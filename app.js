// Generated by CoffeeScript 1.6.3
(function() {
  var Classification, ClassificationScheme, Q, Subject, SubjectScheme, app, db, express, mongoose;

  express = require("express");

  mongoose = require("mongoose");

  Q = require("q");

  app = express();

  app.use(express.bodyParser());

  mongoose.connect(process.env.MONGOHQ_URL || 'mongodb://localhost/rotate_this');

  db = mongoose.connection;

  SubjectScheme = new mongoose.Schema({
    id: 'string',
    location: 'string',
    type: 'string',
    random: 'number'
  });

  Subject = mongoose.model('Subject', SubjectScheme);

  ClassificationScheme = new mongoose.Schema({
    id: 'string',
    subject1: 'string',
    subject2: 'string',
    selected: 'string',
    expert_id: 'string',
    expert_name: 'string'
  });

  Classification = mongoose.model("Classification", ClassificationScheme);

  app.get("/gettwo", function(req, res) {
    var dfd1, dfd2, r, subjects;
    dfd1 = Q.defer();
    dfd2 = Q.defer();
    subjects = [];
    r = Math.random();
    Q.all([dfd1.promise, dfd2.promise]).then(function() {
      return res.json(subjects);
    });
    Subject.find({
      type: 'slow',
      random: {
        "$gt": Math.random()
      }
    }).sort("random").limit(1).execFind(function(err, subject) {
      var index, key, s, _i, _len, _ref;
      index = r < 0.5 ? 0 : 1;
      s = {};
      subject = subject[0];
      if (subject == null) {
        subjects[index] = s;
        dfd1.resolve();
      }
      _ref = ["_id", "location", "random"];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        s[key] = subject[key];
      }
      subjects[index] = s;
      return dfd1.resolve();
    });
    return Subject.find({
      type: 'fast',
      random: {
        "$gt": Math.random()
      }
    }).sort("random").limit(1).execFind(function(err, subject) {
      var index, key, s, _i, _len, _ref;
      index = r < 0.5 ? 1 : 0;
      s = {};
      subject = subject[0];
      if (subject == null) {
        subjects[index] = s;
        dfd2.resolve();
      }
      _ref = ["_id", "location", "random"];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        s[key] = subject[key];
      }
      subjects[index] = s;
      return dfd2.resolve();
    });
  });

  app.post("/classification", function(req, res) {
    var c, classification;
    c = req.body;
    classification = new Classification({
      subject1: c.subject1,
      subject2: c.subject2,
      selected: c.selected,
      expert_id: c.expert_id,
      expert_name: c.expert_name
    });
    classification.save();
    return res.json(true);
  });

  app.use(express["static"](__dirname));

  app.listen(process.env.PORT || 8000);

}).call(this);

/*
//@ sourceMappingURL=app.map
*/
